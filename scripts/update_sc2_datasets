#!/usr/bin/env bash

# Submit a PR to update Nextclade tree
#
# Dependencies:
#  mkdir -p "${HOME}/bin"
#  export PATH="${HOME}/bin:${PATH}"
#  curl -fsSL "https://github.com/cli/cli/releases/download/v2.42.1/gh_2.42.1_linux_amd64.tar.gz" | tar xz -C "${HOME}/bin" --strip-components=2 gh_2.42.1_linux_amd64/bin/gh
#
# Requires git user dataset_name and email to be set. For example:
#  git config user.email "${{ secrets.GIT_USER_EMAIL }}"
#  git config user.dataset_name "${{ secrets.GIT_USER_NAME }}"

set -euxo pipefail
trap 'exit' INT

# Directory where this script resides
THIS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)"


BRANCH="auto-update-sc2-datasets"
TITLE="Update SARS-CoV-2 datasets [automated]"

declare -A trees=(
  ["https://nextstrain.org/staging/nextclade/sars-cov-2"]="nextstrain/sars-cov-2/wuhan-hu-1/orfs"
  ["https://nextstrain.org/staging/nextclade/sars-cov-2/nsp"]="nextstrain/sars-cov-2/wuhan-hu-1/proteins"
  ["https://nextstrain.org/staging/nextclade/sars-cov-2/BA.2"]="nextstrain/sars-cov-2/BA.2"
  ["https://nextstrain.org/staging/nextclade/sars-cov-2/BA.2.86"]="nextstrain/sars-cov-2/BA.2.86"
  ["https://nextstrain.org/staging/nextclade/sars-cov-2/XBB"]="nextstrain/sars-cov-2/XBB"
)

function download_tree() {
  set -euxo pipefail

  local url="${1:?}"
  local dataset_name="${2:?}"

  curl -fsSL \
      -o "data/${dataset_name}/tree.json" \
      -H "Accept: application/vnd.nextstrain.dataset.main+json;q=1, application/json;q=0.9, text/plain;q=0.8, */*;q=0.1" \
      "${url}"
}
export -f download_tree
parallel --jobs "${#trees[@]}" download_tree ::: "${!trees[@]}" ::: "${trees[@]}"


# Setup git identity
gh auth setup-git >/dev/null

# Create a new branch
git switch --quiet --create "${BRANCH}"

# Stage commit and push the changes
git add $(printf "data/%s/tree.json " "${trees[@]}")
git commit --quiet -m "${TITLE}"
git push --quiet

# Function to generate markdown table from the associative array
function summary_table() {
  echo "| Tree on Nextstrain.org | Submitted dataset | Nextclade link |"
  echo "| --- | --- | --- |"
  for url in "${!trees[@]}"; do
    local nextstrain_path="${url#https://nextstrain.org/}"
    local dataset_name="${trees[$url]}"
    echo "| [${nextstrain_path}](${url}) | [${dataset_name}](https://github.com/nextstrain/nextclade_data/tree/${BRANCH}/${trees[$url]}) | [${dataset_name}](https://clades.nextstrain.org/?dataset-server=@${BRANCH}@&dataset-dataset_name=${dataset_name}) |"
  done
}

# Create PR body
function pr_body() {
  cat <<~~
$(summary_table)

Note: this pull request is submitted [automatically](https://github.com/nextstrain/nextclade_data/blob/master/.github/workflows/update-sc2-datasets.yml).

~~
}

# Submit the PR, reading message body from stdin
function submit_pr() {
  pr_body | gh pr create \
    --title "${TITLE}" \
    --body-file - \
    --repo "nextstrain/nextclade_data"
}

# Get PR number from the dataset_name of gh command
function get_pr_number() {
  # The message from gh command typically ends with a URL to the PR and PR number is the last component of the path.
  # Split the string on '/' and take the last component.
  echo "${1##*/}"
}

# Close PR given its number
function close_pr() {
  gh pr close "${1:?}" --delete-branch --repo "nextstrain/nextclade_data"
}

if ! result=$(submit_pr 2>&1); then
  echo "${result}" >&2
  if [[ "${result}" == *"already exists"* ]]; then
    # Failed because PR already exists. Close and resubmit.
    pr_number=$(get_pr_number "${result}")
    close_pr "${pr_number}"
    submit_pr
  else
    exit 1
  fi
else
  echo "${result}"
fi

popd >/dev/null
